File Paths:
./README.md
./src/main.rs
./src/file_processing.rs
./src/cli.rs

File Contents:


Diff of ./README.md:

diff --git a/README.md b/README.md
index cc95559..2ed2428 100644
--- a/README.md
+++ b/README.md
@@ -22,17 +22,16 @@ cargo install dirscribe
 
 Basic syntax:
 ```bash
-dirscribe <directory_path> <comma_separated_suffixes> [options]
+dirscribe <comma_separated_suffixes_or_file_names> [options]
 ```
 
 Example:
 ```bash
-dirscribe . md,rs
+dirscribe md,py,Dockerfile
 ```
 
 ### Options
 
-- `--use-gitignore`: Respect .gitignore rules
 - `--exclude-paths`: Comma-separated paths to exclude
 - `--include-paths`: Comma-separated paths to include
 - `--or-keywords`: Only include files containing at least one of these keywords
@@ -43,12 +42,13 @@ dirscribe . md,rs
 - `--end-commit-id`: Ending commit ID for Git diff range (optional). Must be used with start-commit-id
 - `--prompt-template-path`: Path to a template file that will wrap the output. The template must contain the placeholder `${${CONTENT}$}$` where the collected content should be inserted
 - `--output-path`: Path where the output file should be written. If not provided, output will be copied to clipboard
+- `--dont-use-gitignore`: include files covered by .gitignore
 
-### Advanced Example
+### Example with Diff Only
 
 ```bash
 # Example using Git commit range
-dirscribe . rs,md \
+dirscribe rs,md \
   --diff-only \
   --start-commit-id abc123 \
   --end-commit-id def456
@@ -56,11 +56,10 @@ dirscribe . rs,md \
 
 This will only process files that changed between commits abc123 and def456.
 
-### Advanced Example with All Options
+### Example with Prompt Template
 
 ```bash
-dirscribe . rs,md \
-  --use-gitignore \
+dirscribe rs,md \
   --exclude-paths src/core,src/temp \
   --or-keywords "TODO,FIXME" \
   --prompt-template-path "summarize-issues-to-address-prompt.txt"

Diff of ./src/main.rs:

diff --git a/src/main.rs b/src/main.rs
index 98f2736..e39b744 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -65,9 +65,9 @@ fn main() -> io::Result<()> {
 
     // Process directory and get the content string
     let content = process_directory(
-        &cli.directory_path,
+        ".",
         &suffixes,
-        cli.use_gitignore,
+        cli.dont_use_gitignore,
         cli.diff_only,
         &exclude_paths,
         &include_paths,

Diff of ./src/file_processing.rs:

diff --git a/src/file_processing.rs b/src/file_processing.rs
index ab2ae49..fbd25ba 100644
--- a/src/file_processing.rs
+++ b/src/file_processing.rs
@@ -8,7 +8,7 @@ use crate::git::{get_diff_list, get_diff_str, filter_diff_for_file};
 pub fn process_directory(
     dir_path: &str,
     suffixes: &[String],
-    use_gitignore: bool,
+    dont_use_gitignore: bool,
     diff_only: bool,
     exclude_paths: &[PathBuf],
     include_paths: &[PathBuf],
@@ -48,7 +48,7 @@ pub fn process_directory(
     
     let walker = WalkBuilder::new(dir_path)
         .hidden(false)
-        .git_ignore(use_gitignore)
+        .git_ignore(!dont_use_gitignore)
         .build();
 
     for result in walker {
@@ -65,38 +65,51 @@ pub fn process_directory(
                     }
                 }
 
-                if let Some(file_suffix) = path.extension() {
-                    if suffixes.iter().any(|s| s == file_suffix.to_str().unwrap_or("")) {
-                        // Get relative path from base directory
-                        if let Ok(relative_path) = path.strip_prefix(dir_path) {
-                            let relative_path_str = relative_path.to_string_lossy();
-                            
-                            // Skip if path matches any exclude pattern
-                            if exclude_paths.iter().any(|excluded| 
-                                relative_path_str.starts_with(&excluded.to_string_lossy().as_ref())
-                            ) {
+                // Split file matching into two cases:
+                // 1. Files with extensions matching suffixes
+                // 2. Exact filename matches (like "Dockerfile")
+                let should_include = if let Some(file_suffix) = path.extension() {
+                    // Case 1: Check if extension matches any suffix
+                    suffixes.iter().any(|s| s == file_suffix.to_str().unwrap_or(""))
+                } else {
+                    // Case 2: For files without extensions, check if the full filename matches any suffix
+                    if let Some(filename) = path.file_name() {
+                        suffixes.iter().any(|s| s == filename.to_str().unwrap_or(""))
+                    } else {
+                        false
+                    }
+                };
+
+                if should_include {
+                    // Get relative path from base directory
+                    if let Ok(relative_path) = path.strip_prefix(dir_path) {
+                        let relative_path_str = relative_path.to_string_lossy();
+                        
+                        // Skip if path matches any exclude pattern
+                        if exclude_paths.iter().any(|excluded| 
+                            relative_path_str.starts_with(&excluded.to_string_lossy().as_ref())
+                        ) {
+                            continue;
+                        }
+                        
+                        // Skip if include patterns exist and path doesn't match any
+                        if !include_paths.is_empty() {
+                            let is_included = include_paths.iter().any(|included|
+                                relative_path_str.starts_with(&included.to_string_lossy().as_ref())
+                            );
+                            if !is_included {
                                 continue;
                             }
-                            
-                            // Skip if include patterns exist and path doesn't match any
-                            if !include_paths.is_empty() {
-                                let is_included = include_paths.iter().any(|included|
-                                    relative_path_str.starts_with(&included.to_string_lossy().as_ref())
-                                );
-                                if !is_included {
-                                    continue;
-                                }
-                            }
+                        }
 
-                            // Check keyword filters before adding to valid files
-                            if should_include_file(
-                                &path.to_path_buf(),
-                                or_keywords,
-                                and_keywords,
-                                exclude_keywords,
-                            )? {
-                                valid_files.push(path.to_path_buf());
-                            }
+                        // Check keyword filters before adding to valid files
+                        if should_include_file(
+                            &path.to_path_buf(),
+                            or_keywords,
+                            and_keywords,
+                            exclude_keywords,
+                        )? {
+                            valid_files.push(path.to_path_buf());
                         }
                     }
                 }

Diff of ./src/cli.rs:

diff --git a/src/cli.rs b/src/cli.rs
index 4612ae1..7c81570 100644
--- a/src/cli.rs
+++ b/src/cli.rs
@@ -3,9 +3,6 @@ use clap::Parser;
 #[derive(Parser)]
 #[command(author, version, about, long_about = None)]
 pub struct Cli {
-    /// Directory to process
-    pub directory_path: String,
-
     /// Comma-separated list of file extensions to process (e.g., "txt,md,rs")
     pub suffixes: String,
 
@@ -17,9 +14,9 @@ pub struct Cli {
     #[arg(long)]
     pub output_path: Option<String>,
 
-    /// Ignore files based on .gitignore rules
+    /// Include files that are ignored by default based on .gitignore rules
     #[arg(long, default_value_t = false)]
-    pub use_gitignore: bool,
+    pub dont_use_gitignore: bool,
 
     /// Comma-separated list of paths to exclude
     #[arg(long)]
